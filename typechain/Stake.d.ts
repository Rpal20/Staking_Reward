/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakeInterface extends ethers.utils.Interface {
  functions: {
    "Reward()": FunctionFragment;
    "Total_amount()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "deposit_reward()": FunctionFragment;
    "distibuter(uint256)": FunctionFragment;
    "mytoken()": FunctionFragment;
    "s()": FunctionFragment;
    "token()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Total_amount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_reward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distibuter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mytoken", values?: undefined): string;
  encodeFunctionData(functionFragment: "s", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "Total_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distibuter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mytoken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class Stake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakeInterface;

  functions: {
    Reward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "Reward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    Total_amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "Total_amount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit_reward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "deposit_reward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    distibuter(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distibuter(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mytoken(overrides?: CallOverrides): Promise<[string]>;

    "mytoken()"(overrides?: CallOverrides): Promise<[string]>;

    s(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Reward(overrides?: CallOverrides): Promise<BigNumber>;

  "Reward()"(overrides?: CallOverrides): Promise<BigNumber>;

  Total_amount(overrides?: CallOverrides): Promise<BigNumber>;

  "Total_amount()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit_reward(overrides?: CallOverrides): Promise<BigNumber>;

  "deposit_reward()"(overrides?: CallOverrides): Promise<BigNumber>;

  distibuter(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distibuter(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mytoken(overrides?: CallOverrides): Promise<string>;

  "mytoken()"(overrides?: CallOverrides): Promise<string>;

  s(overrides?: CallOverrides): Promise<BigNumber>;

  "s()"(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Reward(overrides?: CallOverrides): Promise<BigNumber>;

    "Reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    Total_amount(overrides?: CallOverrides): Promise<BigNumber>;

    "Total_amount()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit_reward(overrides?: CallOverrides): Promise<BigNumber>;

    "deposit_reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    distibuter(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "distibuter(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mytoken(overrides?: CallOverrides): Promise<string>;

    "mytoken()"(overrides?: CallOverrides): Promise<string>;

    s(overrides?: CallOverrides): Promise<BigNumber>;

    "s()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    Reward(overrides?: CallOverrides): Promise<BigNumber>;

    "Reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    Total_amount(overrides?: CallOverrides): Promise<BigNumber>;

    "Total_amount()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit_reward(overrides?: CallOverrides): Promise<BigNumber>;

    "deposit_reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    distibuter(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distibuter(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mytoken(overrides?: CallOverrides): Promise<BigNumber>;

    "mytoken()"(overrides?: CallOverrides): Promise<BigNumber>;

    s(overrides?: CallOverrides): Promise<BigNumber>;

    "s()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "Reward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Total_amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "Total_amount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit_reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deposit_reward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distibuter(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distibuter(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mytoken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mytoken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
